{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
	"metadata": {
		"comments": "Automation: Azure Logic App process to download MD EASM Inventory Assets and their details to Onedrive Storage using Azure KeyVault for storing EASM API Client Secrets",
		"author": "MD EASM Go-To-Production (GTP) Customer Experience Engineering (CxE) Team. Email: mdeasm_cxe@microsoft.com"
	},
    "parameters": {
        "workflows_InventoryAssetsDownload_name": {
            "defaultValue": "EASM-Inventory-Assets-Download",
            "type": "String"
        },
		"ClientId": {
			"defaultValue": "",
			"type": "String"
		},
		"KeyVaultSecretName": {
			"defaultValue": "",
			"type": "String"
		},
		"EASMWorkspaceName": {
			"defaultValue": "",
			"type": "String"
		},
		"EASMRegion": {
			"defaultValue": "",
			"type": "String",
			"allowedValues": [
					"southcentralus",
					"eastus",
					"australiaeast",
					"westus3",
					"swedencentral",
					"eastasia",
					"japaneast",
					"westeurope",
					"northeurope",
					"switzerlandnorth",
					"canadacentral",
					"centralus",
					"norwayeast",
					"francecentral",
					""
				],
      "metadata": {
        "description": "Allowed Azure region values, southcentralus, eastus, australiaeast, westus3, swedencentral, eastasia, japaneast, westeurope, northeurope, switzerlandnorth, canadacentral, centralus, norwayeast, francecentral"
		}
		},
		"RunFrequency": {
			"defaultValue": 1,
			"type": "Int"
		},
		"api-version": {
			"defaultValue": "2022-11-01-preview",
			"type": "String"
		},
		"filter": {
			"defaultValue": "state = \"confirmed\"",
			"type": "String"
		},
		"maxpagesize": {
			"defaultValue": "100",
			"type": "String"
		},
		"recentDays": {
			"defaultValue": 180,
			"type": "Int"
		}
    },
    "variables": {
		"OnedriveConnectionName": "[concat('Onedrive-', parameters('workflows_InventoryAssetsDownload_name'))]",
		"KeyvaultConnectionName": "[concat('Keyvault-', parameters('workflows_InventoryAssetsDownload_name'))]"
	},
    "resources": [
        {
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('OnedriveConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/onedriveforbusiness')]"
				}
			}
		},
		{
			"type": "Microsoft.Web/connections",
			"apiVersion": "2016-06-01",
			"name": "[variables('KeyvaultConnectionName')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"api": {
					"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
				}
			}
		},
		{
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_InventoryAssetsDownload_name')]",
            "location": "[resourceGroup().location]",
			"dependsOn": [
				"[resourceId('Microsoft.Web/connections', variables('OnedriveConnectionName'))]",
				"[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]"
			],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "ClientId": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "EASMRegion": {
                            "defaultValue": "",
                            "allowedValues": [
                                "southcentralus",
                                "eastus",
                                "australiaeast",
                                "westus3",
                                "swedencentral",
                                "eastasia",
                                "japaneast",
                                "westeurope",
                                "northeurope",
                                "switzerlandnorth",
                                "canadacentral",
                                "centralus",
                                "norwayeast",
                                "francecentral"
                            ],
                            "type": "String"
                        },
                        "EASMWorkspaceName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "KeyVaultSecretName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "ResourceGroupName": {
                            "defaultValue": "[resourceGroup().name]",
                            "type": "String"
                        },
                        "RunFrequency": {
                            "defaultValue": 1,
                            "type": "Int"
                        },
                        "SubscriptionId": {
                            "defaultValue": "[subscription().subscriptionId]",
                            "type": "String"
                        },
                        "TenantId": {
                            "defaultValue": "[subscription().tenantId]",
                            "type": "String"
                        },
                        "api-version": {
                            "defaultValue": "2022-11-01-preview",
                            "type": "String"
                        },
                        "filter": {
                            "defaultValue": "state = \"confirmed\"",
                            "type": "String"
                        },
                        "maxpagesize": {
                            "defaultValue": "100",
                            "type": "String"
                        },
                        "recentDays": {
                            "defaultValue": 180,
                            "type": "Int"
                        }
                    },
                    "staticResults": {
                        "HTTP0": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Day",
                                "interval": "@parameters('RunFrequency')"
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Day",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Get_secret": {
                            "runAfter": {
                                "Set_calculateDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault_2']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent(parameters('KeyVaultSecretName'))}/value"
                            }
                        },
                        "Initialize_Mark": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "mark",
                                        "type": "string",
                                        "value": "*"
                                    }
                                ]
                            }
                        },
                        "Initialize_calculateDate": {
                            "runAfter": {
                                "Initialize_Mark": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "calculateDate",
                                        "type": "string",
                                        "value": "@{utcNow()}"
                                    }
                                ]
                            }
                        },
                        "Set_calculateDate": {
                            "runAfter": {
                                "Initialize_calculateDate": [
                                    "Succeeded"
                                ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                                "name": "calculateDate",
                                "value": "@{getPastTime(parameters('recentDays'), 'Day', 's')}.000Z"
                            }
                        },
                        "Until": {
                            "actions": {
                                "Until_2": {
                                    "actions": {
                                        "Create_file": {
                                            "runAfter": {
                                                "Mark": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "limit": {
                                                "timeout": "PT1H"
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@body('HTTP')",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['onedrive_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/datasets/default/files",
                                                "queries": {
                                                    "folderPath": "/Test/output",
                                                    "name": "@{iterationIndexes('Until')}_@{iterationIndexes('Until_2')}_Assets_@{utcNow()}.json"
                                                },
                                                "retryPolicy": {
                                                    "count": 10,
                                                    "interval": "PT20S",
                                                    "type": "fixed"
                                                }
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                }
                                            }
                                        },
                                        "HTTP": {
                                            "runAfter": {},
                                            "limit": {
                                                "timeout": "PT180S"
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://easm.defender.microsoft.com/",
                                                    "clientId": "@parameters('ClientId')",
                                                    "secret": "@body('Get_secret')?['value']",
                                                    "tenant": "@parameters('TenantId')",
                                                    "type": "ActiveDirectoryOAuth"
                                                },
                                                "headers": {
                                                    "Content-Type": "application/json",
                                                    "User-Agent": "GitHub-LogicApps-InventoryDownload"
                                                },
                                                "method": "GET",
                                                "queries": {
                                                    "api-version": "@parameters('api-version')",
                                                    "filter": " @{parameters('filter')} and lastSeen>=\"@{variables('calculateDate')}\"",
                                                    "mark": "@variables('mark')",
                                                    "maxpagesize": "@{parameters('maxpagesize')}"
                                                },
                                                "retryPolicy": {
                                                    "count": 10,
                                                    "interval": "PT20S",
                                                    "type": "fixed"
                                                },
                                                "uri": "https://@{parameters('EASMRegion')}.easm.defender.microsoft.com/subscriptions/@{parameters('SubscriptionId')}/resourceGroups/@{parameters('ResourceGroupName')}/workspaces/@{parameters('EASMWorkspaceName')}/assets"
                                            },
                                            "runtimeConfiguration": {
                                                "contentTransfer": {
                                                    "transferMode": "Chunked"
                                                },
                                                "staticResult": {
                                                    "staticResultOptions": "Disabled",
                                                    "name": "HTTP0"
                                                }
                                            }
                                        },
                                        "Mark": {
                                            "runAfter": {
                                                "Parse_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "mark",
                                                "value": "@body('Parse_JSON')?['mark']"
                                            }
                                        },
                                        "Parse_JSON": {
                                            "runAfter": {
                                                "HTTP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP')",
                                                "schema": {
                                                    "properties": {
                                                        "content": {
                                                            "type": "array"
                                                        },
                                                        "first": {
                                                            "type": "boolean"
                                                        },
                                                        "last": {
                                                            "type": "boolean"
                                                        },
                                                        "mark": {
                                                            "type": "string"
                                                        },
                                                        "nextLink": {
                                                            "type": "string"
                                                        },
                                                        "number": {
                                                            "type": "integer"
                                                        },
                                                        "numberOfElements": {
                                                            "type": "integer"
                                                        },
                                                        "size": {
                                                            "type": "integer"
                                                        },
                                                        "totalElements": {
                                                            "type": "integer"
                                                        },
                                                        "totalPages": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": "@equals(body('Parse_JSON')?['last'], true)",
                                    "limit": {
                                        "count": 4999,
                                        "timeout": "PT20H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(body('Parse_JSON')?['last'], true)",
                            "limit": {
                                "count": 4999,
                                "timeout": "P3D"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "keyvault_2": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyvaultConnectionName'))]",
                                "connectionName": "[variables('KeyvaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            },
                            "onedrive_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('OnedriveConnectionName'))]",
                                "connectionName": "[variables('OnedriveConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/onedriveforbusiness')]"
                            }
                        }
                    },
                    "ClientId": {
                        "value": "[parameters('ClientId')]"
                    },
		    "EASMWorkspaceName": {
                        "value": "[parameters('EASMWorkspaceName')]"
                    },
                    "EASMRegion": {
                        "value": "[parameters('EASMRegion')]"
                    },
                    
                    "KeyVaultSecretName": {
                        "value": "[parameters('KeyVaultSecretName')]"
                    },
                    "RunFrequency": {
                        "value": "[parameters('RunFrequency')]"
                    },
                    "api-version": {
                        "value": "[parameters('api-version')]"
                    },
                    "filter": {
                        "value": "[parameters('filter')]"
                    },
                    "maxpagesize": {
                        "value": "[parameters('maxpagesize')]"
                    },
                    "recentDays": {
                        "value": "[parameters('recentDays')]"
                    }
                }
            }
        }
    ]
}